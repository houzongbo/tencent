一：哈希
  1. 两数之和  array_search寻找元素索引
* 2. 字母异位词分组 array_value输出数组、table中的值
                    str_split:将字符串分成数组     implode(分隔符，array)：将数组拼接成字符串
                    sort() 对数组进行排序
  3. 最长连续数列  去重（可以用array_flip 进行数组kv反转实现值的去重）

二：指针
* 4. 移动0    快慢指针 慢指针存非0    [x,y] = [y,x] 数组换位   ***把非0 放到前面
  5. 盛水最多的容器  前后双指针
* 6. 三数之和  伪三指针 实际是循环的前后双指针； 注意去重！i+l+r == 0 时， 判断 l = l+1,  r-1 = r
* 7. 接雨水  动态规划  对于每一列求左侧最高和右侧最高  用循环记录两个list
             双指针，降低空间复杂度
三: 滑动窗口
* 8. 无重复字符的最长子串   快慢指针 可以使用array的value存储滑块，  也可以使用array的key存滑块value存索引
            $slow = max($slow, $set[$s[$fast]] + 1);
** 9. 找到字符串中所有字母异位词    快慢指针    *需要注意每个字母的数量，一个array记录滑块， 一个array记录滑块中每个字母数量

四. 子串
** 10. 和为K的子数组        前缀和        每次遍历的时候都记录了当前的前缀和以及出现的次数 ，当前前缀和-目标值 = 之前记录的前缀和
** 11. 滑动窗口最大值      *队列   1. 优先队列 用到了SplPriorityQueue      2. 单调队列  SplQueue  维护一个单调减的队列，每次都把比当前小的值pop出来  队尾存大   队头存小
** 12. 最小覆盖子串        滑动窗口    用hash判断是否满足子串要求，每次循环满足check的时候，开始二次循环，去更新左边界，更新新子串   **单独写个check函数

五. 数组
  13. 最大子数组和    动态规划
* 14. 合并区间      先排序 sort()
* 15. 轮转数组      活用反转数组  反转3次
  16. 除自身以外数组的乘积      动态规划
* 17. 缺失的第一个正数       双for循环。for nums[i] > 0 && nums[i] <= n && nums[i] != nums[nums[i]-1] ；nums[nums[i]-1], nums[i] = nums[i],nums[nums[i]-1]

六. 矩阵
* 18. 矩阵置零      用矩阵的第一行和第一列来存放矩阵信息（是否有0） ，但是得预先用两个变量存放一行一列的信息。
  19. 螺旋矩阵      上下左右四个函数，注意每次更新边界
  20. 旋转图像      多次旋转  对角+横向
* 21. 搜索二维矩阵II    从右上角开始，target小左移，target大下移

七. 链表    环形链表用双指针    链表换位考虑递归
  22. 相交链表    双指针    重定向，  *用！==  而不是！=  链表节点可能值相同  但是内存不同
  23. 反转链表    迭代法，递归法   递归法注意在开始加上判断
** 24. 回文链表    数组；递归，用到引用或者用public声明 this调用；链表中间隔断，翻转前半链表，再进行判断      ****巧妙做法，public记录一个pre节点，cur节点递归到最后时和pre节点比较，
  25. 环形链表    快慢指针
* 26. 环形链表II   快慢指针， 需要两次相遇，第一次相遇后 将快指针放到链表头
  27. 合并两个有序链表   经典递归   
  28. 两数相加    模拟法
  29. 删除链表的倒数第 N 个结点    经典双指针，fast先走n
  30. 两两交换链表中的节点      迭代法，比较复杂$tmp,$now,$pre  递归
* 31. K个一组翻转链表    递归法，先判断k是否满足翻转，再进行反转链表
* 32. 随机链表的复制          可用递归；hash存，来过滤重复  ***
* 33. 排序链表      归并排序;  merge + 中间拆分（快慢指针）f,s,pre pre用来把前半段末端->nil
** 34. 合并k个升序链表    merge + 分治法 ，分治算法边界  n/2
** 35. LRU      hash+双向链表   moveToHead;addToHead;removeNode            ***构造函数有两个__; 更新hash的时候先删后加

八. 二叉树
  36. 二叉树的中序遍历   左根右； 递归，迭代  栈 array_push,array_pop
  37. 二叉树的最大深度    递归，迭代  队列
  38. 翻转二叉树        递归，迭代    队列
* 39. 对称二叉树         dfs递归    辅助函数（左子树，右子树）
  40. 二叉树直径      dfs递归    辅助函数 记录不分叉最高层数
  41. 二叉树层序遍历    bfs迭代
** 42. 将有序数组转换为二叉搜索树    二分法，    ***php取整可用floor() 或  (int)()      ***可用辅助函数，取中位数 
* 43. 验证二叉搜索树      DFS递归，辅助函数记录上层节点值，向左下递归的时候，节点值不能大于上层；右下递归的时候，节点值不能小于上层
                        PHP_INT_MIN      PHP_INT_MAX
  44. 二叉搜索树中第K小的元素    中序遍历，左中右  栈
  45. 二叉树的右视图      广度优先搜索，队列
** 46. 二叉树展开为链表    前序遍历  可以借助辅助函数，附带数组；        也可以用全局变量存pre 作为下一次递归的右指针，逆先序遍历 右左中
* 47. 从前序与中序遍历序列构造二叉树      递归，辅助函数，需要额外记录前序 中序的4个边界值, 以及一个hash记录前序的index;  中序遍历思想      **结束递归。p_l > p_r    len = i - i_l
** 48. 路径总和III      递归，辅助函数     总和 = 左节点路径总和+右节点路径总和 + 经过本节点的路径总和
* 49. 二叉树的最近公共祖先   递归，左子树有没有，右子树有没有，都没有就说明该节点下没有公共祖先，都有就说明是该节点。
  50. 二叉树中的最大路径和    递归  辅助函数

九. 图论
  51. 岛屿数量      dfs递归，辅助函数  经过的点需要置位
* 52. 腐烂的橘子    bfs广度优先搜索    在下次遍历前置位
** 53. 课程表        dfs  需要visited和edges辅助，记录经过的点 和下一个节点的hash； 注意：visited每次遍历到都要置2
* 54. 实现trie前缀树      dfs    需要辅助函数，记录当前前缀树，以及标记当前是否是单词结尾；  迭代用切换指针实现

十. 回溯
** 55. 全排列      递归 回溯法；   交换-》下层递归-》交换回来。 如果层数到顶，结束     $j = $i; $i+1
* 56. 子集        递归 回溯法        每次递归，都记录    $j = $i; $j+1
  57. 电话号码的字母组合      回溯法         哈希， $j=0; $i+1
  58. 组合总和      回溯法，递归              $j = $i; $j
  59. 括号生成    回溯，记录左括号数量，和右括号数量
  60. 单词搜索    回溯+dfs    
* 61. 分割回文字串      动态规划 + 回溯          dp[i][j] 判断 i-j是否回文， 双层循环   i 从后往前， j 从i+1往后  $dp[$i][$j] = ($s[$i] == $s[$j]) && $dp[$i + 1][$j - 1];     $j=$i; $j+1
* 62. N皇后      回溯+判断      **判断思路：  i，j 这个位置上能否放queen   上  左上  右上  

十一. 二分查找
* 63. 搜索插入位置    (l + r)/2  => ((r-l)>>1) + l   *l <= r;  m 和 l r 比较  输出l
  64. 搜索二维矩阵    二分查找(两个循环)    或者  从矩阵右上角开始查找
  65. 在排序数组中查找元素的第一个和最后一个位置      二分查找，分别查找元素的左边界和右边界 * l <= r  left = l;  right = r 
** 66. 搜索旋转排序数组      二分查找， 中间值和最左值作比较， 如果中间大等，说明中间值在左侧区间，此时再判断target在中间值的左右 * l <= r   先判断 nums[m] >= nums[0]
** 67. 寻找旋转排序数组中的最小值        经典二分查找      每次piviot和最右值比较  小于：r=m; 大等：l=m+1  
* 68. 寻找两个正序数组的中位数            第k小数     辅助函数， s1,e1, s2,e2

十二. 栈
  69. 有效的括号  栈 + 哈希
  70. 最小栈    利用辅助栈
* 71. 字符串解码      双栈  一个存数字  一个存字母；muli，res  当判断数字时，更新multi； 当判断[时，将字母和数字入栈，重置；当判断]时，更新字母res, res = 字母栈顶 + 数字栈顶*res
  72. 每日温度      单调栈      数组反转array_reverse()   或者 数组初始化array_fill(0, n, 0)
* 73. 柱状图中最大的矩形          双 单调栈        对于每个柱子，寻找他的左边界和右边界

十三. 堆
* 74. 数组中的第K个最大元素      经典堆排序      build从第非叶子结点开始建堆（size/2）; maxheap每次递归，当前节点和左右结点比较，进行交换，注意** 确保左右结点存在，l<size, r<size;  最后每次将根结点和largest交换
* 75. 前 K 个高频元素        桶排序。 先hash算频率    再建桶 [][]int,len(nums)+1    
! 76. 数据流的中位数

十四. 贪心算法
  77. 买卖股票的最佳时机      类 动态规划      右往左一次循环每次记录最高点
* 78. 跳跃游戏    类动态规划，一次循环；每次记录当前能走最远
* 79. 跳跃游戏II    一次循环，每次更新最远距离max，当到达end的时候，更新end为max且更新跳跃次数ans    ***循环判断到n-1
* 80. 划分字母区间       **用hash记录每个字符最后一次出现的位置  end = max(end, hash[v]) if i == end 更新slow指针
  
十五. 动态规划
  81. 爬楼梯
  82. 杨辉三角    d[i][j] = d[i-1][j] + d[i-1][j-1]
  83. 打家劫舍      
* 84. 完全平方数    嵌套循环      d[i] = min(d[i], 1 + d[i - j*j])
  85. 零钱兑换    嵌套循环       $d[$i] = min($d[$i], 1 + $d[$i - $v])
* 86. 单词拆分      嵌套循环       j=0,j<i;  if d[j] == true && hash[s[j:i]] 
* 87. 最长递增子序列   嵌套循环    思路：第一层循环，把每个节点当成末节点，再往前循环更新，找地当前小的节点        j=i-1 if $nums[$i] > $nums[$j]  $dp[$i] = max($dp[$i], $dp[$j] + 1);
  88. 乘积最大子数组      记录最小值和最大值， 每一轮更新    *不用区分正负   mx,mn = nums[0],nums[0];  mx = max(nums[i]*mx, nums[i]*mn,nums[i])
* 89. 分割等和子集        嵌套循环  先找target = sum / 2     dp用来存j的状态   i=0 i<n i++； j = target， $j >= $tmp， j--     dp[j] = $dp[j] || $dp[j - nums[i]];
  90. 最长有效括号        栈 + 动态规划          每找到一个），栈里pop一个（，再找这个前一个的）dp，      tmp = stack[len(stack)-1],   dp[i] = dp[tmp-1] + i-tmp+1

十六.  多维动态规划
  91. 不同路径     di,j = di-1,j + di,j-1 
  92. 最小路径和    di,j =  min(di-1,j ; di,j-1 ) + gi,j
* 93. 最长回文子串      嵌套循环， 先循环长度，再循环左边界，这样就能确认右边界      di,j  表示i和j之间的是否是回文字串
* 94. 最长公共子序列      双层循环 dp[i][j] : w1[:i] 和 w2[:j]公共子序列   dp[0][0]=0     预先两次循环搞定边界 dp[0][j]=0 dp[i][0]=0 
            i<=n1    word1[i-1]==word2[j-1] ij = i-1j-1 + 1; ij = max(i-1j, ij-1)
**95.  编辑距离        双层循环   dp[i][j] : 从w1的i转移到w2的j需要步数  ，dp[0][0] = 0 预先两次循环搞定边界 dp[0][j]=j dp[i][0]=i  
           i<=n1     word1[i-1] == word2[j-1] ij = i-1j-1；否则 : ij = min(i-1j, ij-1, i-1j-1) + 1
  
十七. 技巧
* 96. 只出现一个的数字    异或     a异或a = 0       a异或0 = a
* 97. 多数元素      摩尔选举法    当vote = 0 时，选举新的主元素， 当前元素为主元素时，vote++
* 98. 颜色分类      模拟快排。辅助函数 l，r      l>r return    for i<=j  for nums[i] < p; for nums[j] > p; ni,nj = nj, ni i++ j--; helper(l,j), helper(i,r)
  99. 下一个排列。 从后往前，找i < i+1 的情况。 反转 i+1 往后， 再把i放到后面正确的位置上
**  100. 寻找重复数      模拟环形链表2





*********************150题新增

  一. 数组/字符串
* 1. 删除有序数组中的重复项 II      双指针  快慢指针， slow负责保证前面没有能有相同值超过2，判断slow-2 和 fast 的值，如果不同，需要把fast赋值给slow。
  2. 买卖股票最佳时机II        双动态规划    保存一个持有股票状态，保存一个未持有股票状态
* 3. H指数    排序，从后往前，
  4. O(1) 时间插入、删除和获取随机元素        hash+数组。  hash存val在数组中的下标      随机数rand()
* 5. 加油站      穷举的优化    双层循环，记录cnt步数， start内层循环，amount当前容量  i+cnt达不到，直接从 i+cnt+1开始    *嵌套遍历时，巧用%表示环型
* 6. Z字形变化   res存每一行字符串，i表示行数，flag表示向上或向下        *** res[i] += c；if i == 0 or i == numRows - 1,  flag = - flag;  i += flag

  二。 双指针
  7. 验证回文串    $stringData = preg_replace("/[^a-zA-Z0-9]+/", "", $s);  $s = strtolower($stringData);
  8. 

  三。 滑动窗口
* 9. 长度最小的子数组    双指针，双循环，tmp存当前子数组和

  四. 区间
  10. 插入区间    双指针  模拟  isfinish记录是否插入    遇到交集的时候，判断左边界和右边界
  11. 用最少数量的箭引爆气球    排序贪心，一次循环每次更新边界


  五。 栈
* 12. 计算器    sign栈存放1或-1， 栈里先放个1， +:取top为sign， -：取top相反为sign， （：将sign push， ）：pop， 数字的情况下二次循环，拿到运算数字num，ret += sign * num;

  n皇后：
func solveNQueens(n int)  [][]string {
    ans := [][]string{}
    
    // col 下标代表行, 值代表列
    // st 下标代表该列是否放皇后
    col, st := make([]int, n), make([]bool, n)
    // n*2 是为了防止下标越界
    // d1 存的是左上右下的对角线
    // d2 存的是右上左下的对角线
    d1, d2 := make([]bool, n*2), make([]bool, n*2)
    var dfs func(int)
    dfs = func(r int) { // r 代表枚举的行
        if r == n { // 放完所有皇后了
            board := make([]string, n)
            for i, c := range col { // i 是行, c 是列
                board[i] = strings.Repeat(".", c) + "Q" + strings.Repeat(".", n-1-c)
            }
            ans = append(ans, board)
            return
        }
        for c, v := range st {
            // 对角线的 r-c（左上右下）/r+c（右上左下） 值相同，可以通过这个性质查看是否有皇后在对角线上
            rc1 := r-c+n // +n 是防止下标越界（出现负数）
            rc2 := r+c
            if v == false && d1[rc1] == false && d2[rc2] == false { // 三线都没有皇后才能放
                col[r] = c // 在 r 行 c 列放了皇后
                st[c], d1[rc1], d2[rc2] = true, true, true
                dfs(r+1)
                st[c], d1[rc1], d2[rc2] = false, false, false
            }
        }
    }
    dfs(0)
    return ans
}

字符串解码：
    function decodeString($s) {
        $res = '';
        $stack = [];
        $num = [];
        $arr = str_split($s);

        $multi = 0;
        
        foreach($arr as $v){
            if(is_numeric($v)){
                $multi = $multi * 10 + $v;
            }elseif($v == '['){
                $num[] = $multi;
                $stack[] = $res;
                $multi = 0;
                $res = '';
            }elseif($v == ']'){
                $tmp = '';
                $cur = array_pop($num);
                for($i = 0; $i < $cur; $i++){
                    $tmp .= $res;
                }
                $res = array_pop($stack) . $tmp;
            }else{
                $res .= $v;
            }
        }
        

        return $res;
    }
}

计算器 无括号

func calculate(s string) (ans int) {
    stack := []int{}
    preSign := '+'
    num := 0
    for i, ch := range s {
        isDigit := '0' <= ch && ch <= '9'
        if isDigit {
            num = num*10 + int(ch-'0')
        }
        if !isDigit && ch != ' ' || i == len(s)-1 {
            switch preSign {
            case '+':
                stack = append(stack, num)
            case '-':
                stack = append(stack, -num)
            case '*':
                stack[len(stack)-1] *= num
            default:
                stack[len(stack)-1] /= num
            }
            preSign = ch
            num = 0
        }
    }
    for _, v := range stack {
        ans += v
    }
    return
}


计算器 有括号

func calculate(s string) (ans int) {
    ops := []int{1}
    sign := 1
    n := len(s)
    for i := 0; i < n; {
        switch s[i] {
        case ' ':
            i++
        case '+':
            sign = ops[len(ops)-1]
            i++
        case '-':
            sign = -ops[len(ops)-1]
            i++
        case '(':
            ops = append(ops, sign)
            i++
        case ')':
            ops = ops[:len(ops)-1]
            i++
        default:
            num := 0
            for ; i < n && '0' <= s[i] && s[i] <= '9'; i++ {
                num = num*10 + int(s[i]-'0')
            }
            ans += sign * num
        }
    }
    return
}
