1. 平衡二叉树
	·非叶子节点只允许最多两个子节点
	·左子节点值小于当前节点值，右子节点值大于当前节点值
	·通过平衡算法（AVL,红黑树）左右节点高度差不超过2

2. B树
	·节点关键字递增排列
	·非叶节点的子节点数>1,子节点数<=M,M>=2
	·关键字	大于等于ceil(m/2)-1; 小于等于m-1
	·叶子节点都在一层

	每个节点更多数据，减少高度

3. B+树
	·非叶子节点不保存数据，只保存关键字索引
	·叶子节点关键字从小到大排列，左边结尾保存指向右边开始的指针	利于排序
	
4. B树和B+树比较
	1、 B+树稳定，数据都存在叶子节点，查找次数相同
	2、 B+树天然排序，叶子节点是有序链表	缓存命中率高
	3、 B+树全节点遍历更快，只需要遍历叶子节点

5. 红黑树
	2-3树演变，自平衡二叉查找树
	定义：	1. 节点有红有黑
		2.  根节点黑色
		3. 所有叶子黑色的空节点
		4. 任意节点到叶子节点经过黑色节点数相同
		5. 没有连续红色节点

	插入，删除：需要变色，旋转节点
	应用：hashmap