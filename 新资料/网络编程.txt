一. I/O
	读入，写出数据的过程，等待读入写出的过程。
	
	同步，异步
	阻塞，非阻塞

	
	阻塞：线程等待		等待内核准备数据+拷贝到用户态
	非阻塞：线程不等待，轮询	等待拷贝到用户态
	多路复用：线程不等待，监听
	异步：线程不等待，资源主动返回	都不用等待



二. Reactor
	一个单独的线程负责监听和分发事件。	io多路复用+线程池
	主从模式，主负责建立连接，从负责io监听
	
	单reactor 单进程/线程：C，java；简单，无法利用多核资源，handler处理造成延时 read process send
	单reactor 多进程/线程：handler将业务处理放到子线程处理；出现竞态
	多reactor 多进程/线程：主reactor线程负责监听，建立连接，子线程负责监听，handler；
				主从分工明确；交互简单

三. Proactor
	异步网络模型
	免去两个等待时间，提前传入用户缓冲区地址
	

四. read和write
	read：	阻塞：接收缓冲区有数据，立即返回；没数据，等待
		非阻塞：接收缓冲区有数据，立即返回；没数据，立即返回，带错误码

	write：	阻塞：缓冲区有空间，写入再返回；无空间，等待空间
		非阻塞：缓冲区有空间，能写多少写多少，立即返回，带写入字节数。 可以再次write输出未完成；无空间，立即返回，带错误码

五. select
	用户态提供文件描述符数组，内核遍历，确定哪个可以读写
	1. select传入fd数组，拷贝到内核 
	2. 内核遍历检查文件就绪状态，同步过程
	3. select返回用户就绪文件描述符个数，用户还需要遍历

	文件描述符有限，默认1024

六. poll
	select中，fd_set固定文件描述符个数；poll中，pollfd数组改变描述符个数
	解决了文件数量上限问题

七. epoll
	针对select进行改进
	1. 内核保存文件描述符集合，不用每次用户传入拷贝，值告诉内核修改的部分
	2. 内核不用轮询，异步唤醒
	3. 内核将io描述符返还用户，用户不用遍历

	epoll_create创建句柄，建立链接	
	epoll_ctl 向内核增删改fd； 内核fd用红黑树结构存储
	epoll_wait类似select进行阻塞监听




	不仅有条件触发机制，还有边缘触发机制
	当文件描述符增加时，select和poll性能下降明显，epoll变化不大
	边缘触发：只触发一次wait； 尽可能多进行读写，和非阻塞io搭配

	条件触发：条件触发。一直wait

	bian


	



	


