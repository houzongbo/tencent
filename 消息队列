一. 使用场景
	1. 异步处理	避免等待，浪费资源
	2. 解耦生产者消费者		
	3. 削峰		适用高并发场景
	4. 消息驱动的系统

二. 模式
	1. 点对点模式
		·每个消息只有一个消费者
		·生产者和消费者无依赖
		·消费者消费后需要通知消息队列，删除消息

	2. 发布订阅模式
		主题，发布者，订阅者
		·每个消息可能有多个订阅者
		·发布者和订阅者有依赖
		·订阅者需要提前订阅主题，保持在线运行
三. 常用
	1. Kafka 	zookeeper 分区	P2P
		1. 高吞吐	零拷贝，批处理，数据压缩
		2. 快速持久化
		
	2. RabbitMQ	镜像队列
		1. erlang语言，性能好
		2. 复制设计，延展性差

	3. RocketMQ	NameServer 	主从架构
		适用主题 分区增加，将消息存储同一物理文件
